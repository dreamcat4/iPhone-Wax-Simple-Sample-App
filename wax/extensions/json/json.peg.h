/* A recursive-descent parser generated by peg 0.1.2 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define YYRULECOUNT 20
#ifndef YY_VARIABLE
#define YY_VARIABLE(T)    static T
#endif
#ifndef YY_LOCAL
#define YY_LOCAL(T)    static T
#endif
#ifndef YY_ACTION
#define YY_ACTION(T)    static T
#endif
#ifndef YY_RULE
#define YY_RULE(T)    static T
#endif
#ifndef YY_PARSE
#define YY_PARSE(T)    T
#endif
#ifndef YYPARSE
#define YYPARSE        yyparse
#endif
#ifndef YYPARSEFROM
#define YYPARSEFROM    yyparsefrom
#endif
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)            \
  {                            \
    int yyc= getchar();                    \
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);    \
    yyprintf((stderr, "<%c>", yyc));            \
  }
#endif
#ifndef YY_BEGIN
#define YY_BEGIN    ( yybegin= yypos, 1)
#endif
#ifndef YY_END
#define YY_END        ( yyend= yypos, 1)
#endif
#ifdef YY_DEBUG
# define yyprintf(args)    fprintf args
#else
# define yyprintf(args)
#endif
#ifndef YYSTYPE
#define YYSTYPE    int
#endif

#ifndef YY_PART

typedef void (*yyaction)(char *yytext, int yyleng);
typedef struct _yythunk { int begin, end;  yyaction  action;  struct _yythunk *next; } yythunk;

YY_VARIABLE(char *   ) yybuf= 0;
YY_VARIABLE(int         ) yybuflen= 0;
YY_VARIABLE(int         ) yypos= 0;
YY_VARIABLE(int         ) yylimit= 0;
YY_VARIABLE(char *   ) yytext= 0;
YY_VARIABLE(int         ) yytextlen= 0;
YY_VARIABLE(int         ) yybegin= 0;
YY_VARIABLE(int         ) yyend= 0;
YY_VARIABLE(int         ) yytextmax= 0;
YY_VARIABLE(yythunk *) yythunks= 0;
YY_VARIABLE(int         ) yythunkslen= 0;
YY_VARIABLE(int      ) yythunkpos= 0;
YY_VARIABLE(YYSTYPE  ) yy;
YY_VARIABLE(YYSTYPE *) yyval= 0;
YY_VARIABLE(YYSTYPE *) yyvals= 0;
YY_VARIABLE(int      ) yyvalslen= 0;

YY_LOCAL(int) yyrefill(void)
{
  int yyn;
  while (yybuflen - yypos < 512)
    {
      yybuflen *= 2;
      yybuf= realloc(yybuf, yybuflen);
    }
  YY_INPUT((yybuf + yypos), yyn, (yybuflen - yypos));
  if (!yyn) return 0;
  yylimit += yyn;
  return 1;
}

YY_LOCAL(int) yymatchDot(void)
{
  if (yypos >= yylimit && !yyrefill()) return 0;
  ++yypos;
  return 1;
}

YY_LOCAL(int) yymatchChar(int c)
{
  if (yypos >= yylimit && !yyrefill()) return 0;
  if (yybuf[yypos] == c)
    {
      ++yypos;
      yyprintf((stderr, "  ok   yymatchChar(%c) @ %s\n", c, yybuf+yypos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchChar(%c) @ %s\n", c, yybuf+yypos));
  return 0;
}

YY_LOCAL(int) yymatchString(char *s)
{
  int yysav= yypos;
  while (*s)
    {
      if (yypos >= yylimit && !yyrefill()) return 0;
      if (yybuf[yypos] != *s)
        {
          yypos= yysav;
          return 0;
        }
      ++s;
      ++yypos;
    }
  return 1;
}

YY_LOCAL(int) yymatchClass(unsigned char *bits)
{
  int c;
  if (yypos >= yylimit && !yyrefill()) return 0;
  c= yybuf[yypos];
  if (bits[c >> 3] & (1 << (c & 7)))
    {
      ++yypos;
      yyprintf((stderr, "  ok   yymatchClass @ %s\n", yybuf+yypos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchClass @ %s\n", yybuf+yypos));
  return 0;
}

YY_LOCAL(void) yyDo(yyaction action, int begin, int end)
{
  while (yythunkpos >= yythunkslen)
    {
      yythunkslen *= 2;
      yythunks= realloc(yythunks, sizeof(yythunk) * yythunkslen);
    }
  yythunks[yythunkpos].begin=  begin;
  yythunks[yythunkpos].end=    end;
  yythunks[yythunkpos].action= action;
  ++yythunkpos;
}

YY_LOCAL(int) yyText(int begin, int end)
{
  int yyleng= end - begin;
  if (yyleng <= 0)
    yyleng= 0;
  else
    {
      while (yytextlen < (yyleng - 1))
    {
      yytextlen *= 2;
      yytext= realloc(yytext, yytextlen);
    }
      memcpy(yytext, yybuf + begin, yyleng);
    }
  yytext[yyleng]= '\0';
  return yyleng;
}

YY_LOCAL(void) yyDone(void)
{
  int pos;
  for (pos= 0;  pos < yythunkpos;  ++pos)
    {
      yythunk *thunk= &yythunks[pos];
      int yyleng= thunk->end ? yyText(thunk->begin, thunk->end) : thunk->begin;
      yyprintf((stderr, "DO [%d] %p %s\n", pos, thunk->action, yytext));
      thunk->action(yytext, yyleng);
    }
  yythunkpos= 0;
}

YY_LOCAL(void) yyCommit()
{
  if ((yylimit -= yypos))
    {
      memmove(yybuf, yybuf + yypos, yylimit);
    }
  yybegin -= yypos;
  yyend -= yypos;
  yypos= yythunkpos= 0;
}

YY_LOCAL(int) yyAccept(int tp0)
{
  if (tp0)
    {
      fprintf(stderr, "accept denied at %d\n", tp0);
      return 0;
    }
  else
    {
      yyDone();
      yyCommit();
    }
  return 1;
}

YY_LOCAL(void) yyPush(char *text, int count)    { yyval += count; }
YY_LOCAL(void) yyPop(char *text, int count)    { yyval -= count; }
YY_LOCAL(void) yySet(char *text, int count)    { yyval[count]= yy; }

#endif /* YY_PART */

#define    YYACCEPT    yyAccept(yythunkpos0)

YY_RULE(int) yy_EndOfLine(); /* 20 */
YY_RULE(int) yy_Space(); /* 19 */
YY_RULE(int) yy_Pair(); /* 18 */
YY_RULE(int) yy_Pairs(); /* 17 */
YY_RULE(int) yy_Member(); /* 16 */
YY_RULE(int) yy_Members(); /* 15 */
YY_RULE(int) yy_Digit(); /* 14 */
YY_RULE(int) yy_Exponent(); /* 13 */
YY_RULE(int) yy_Fraction(); /* 12 */
YY_RULE(int) yy_Integer(); /* 11 */
YY_RULE(int) yy_Hex(); /* 10 */
YY_RULE(int) yy_Char(); /* 9 */
YY_RULE(int) yy_Object(); /* 8 */
YY_RULE(int) yy_Array(); /* 7 */
YY_RULE(int) yy_Number(); /* 6 */
YY_RULE(int) yy_String(); /* 5 */
YY_RULE(int) yy_Boolean(); /* 4 */
YY_RULE(int) yy_Null(); /* 3 */
YY_RULE(int) yy_Spacing(); /* 2 */
YY_RULE(int) yy_Value(); /* 1 */

YY_ACTION(void) yy_1_Pair(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_1_Pair\n"));
   json_addToHash(); ;
}
YY_ACTION(void) yy_1_Object(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_1_Object\n"));
   json_newHash(); ;
}
YY_ACTION(void) yy_1_Member(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_1_Member\n"));
   json_addToArray(); ;
}
YY_ACTION(void) yy_1_Array(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_1_Array\n"));
   json_newArray(); ;
}
YY_ACTION(void) yy_2_Boolean(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_2_Boolean\n"));
   json_pushBoolean(false); ;
}
YY_ACTION(void) yy_1_Boolean(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_1_Boolean\n"));
   json_pushBoolean(true); ;
}
YY_ACTION(void) yy_1_Number(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_1_Number\n"));
   json_pushNumber(strtod(yytext, NULL)); ;
}
YY_ACTION(void) yy_1_String(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_1_String\n"));
   json_pushString(yytext); ;
}
YY_ACTION(void) yy_1_Null(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_1_Null\n"));
   json_pushNil(); ;
}

YY_RULE(int) yy_EndOfLine()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "EndOfLine"));
  {  int yypos2= yypos, yythunkpos2= yythunkpos;  if (!yymatchString("\r\n")) goto l3;  goto l2;
  l3:;      yypos= yypos2; yythunkpos= yythunkpos2;  if (!yymatchChar('\n')) goto l4;  goto l2;
  l4:;      yypos= yypos2; yythunkpos= yythunkpos2;  if (!yymatchChar('\r')) goto l1;
  }
  l2:;    
  yyprintf((stderr, "  ok   %s @ %s\n", "EndOfLine", yybuf+yypos));
  return 1;
  l1:;      yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "EndOfLine", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Space()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Space"));
  {  int yypos6= yypos, yythunkpos6= yythunkpos;  if (!yymatchChar(' ')) goto l7;  goto l6;
  l7:;      yypos= yypos6; yythunkpos= yythunkpos6;  if (!yymatchChar('\t')) goto l8;  goto l6;
  l8:;      yypos= yypos6; yythunkpos= yythunkpos6;  if (!yy_EndOfLine()) goto l5;
  }
  l6:;    
  yyprintf((stderr, "  ok   %s @ %s\n", "Space", yybuf+yypos));
  return 1;
  l5:;      yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Space", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Pair()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Pair"));  if (!yy_String()) goto l9;  if (!yy_Spacing()) goto l9;  if (!yymatchChar(':')) goto l9;  if (!yy_Spacing()) goto l9;  if (!yy_Value()) goto l9;  yyDo(yy_1_Pair, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Pair", yybuf+yypos));
  return 1;
  l9:;      yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Pair", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Pairs()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Pairs"));  if (!yy_Pair()) goto l10;
  l11:;    
  {  int yypos12= yypos, yythunkpos12= yythunkpos;  if (!yymatchChar(',')) goto l12;  if (!yy_Spacing()) goto l12;  if (!yy_Pair()) goto l12;  goto l11;
  l12:;      yypos= yypos12; yythunkpos= yythunkpos12;
  }
  {  int yypos13= yypos, yythunkpos13= yythunkpos;  if (!yymatchChar(',')) goto l13;  goto l14;
  l13:;      yypos= yypos13; yythunkpos= yythunkpos13;
  }
  l14:;      if (!yy_Spacing()) goto l10;
  yyprintf((stderr, "  ok   %s @ %s\n", "Pairs", yybuf+yypos));
  return 1;
  l10:;      yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Pairs", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Member()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Member"));  if (!yy_Value()) goto l15;  yyDo(yy_1_Member, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Member", yybuf+yypos));
  return 1;
  l15:;      yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Member", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Members()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Members"));  if (!yy_Member()) goto l16;
  l17:;    
  {  int yypos18= yypos, yythunkpos18= yythunkpos;  if (!yymatchChar(',')) goto l18;  if (!yy_Spacing()) goto l18;  if (!yy_Member()) goto l18;  goto l17;
  l18:;      yypos= yypos18; yythunkpos= yythunkpos18;
  }
  {  int yypos19= yypos, yythunkpos19= yythunkpos;  if (!yymatchChar(',')) goto l19;  goto l20;
  l19:;      yypos= yypos19; yythunkpos= yythunkpos19;
  }
  l20:;      if (!yy_Spacing()) goto l16;
  yyprintf((stderr, "  ok   %s @ %s\n", "Members", yybuf+yypos));
  return 1;
  l16:;      yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Members", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Digit()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Digit"));  if (!yymatchClass((unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l21;
  yyprintf((stderr, "  ok   %s @ %s\n", "Digit", yybuf+yypos));
  return 1;
  l21:;      yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Digit", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Exponent()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Exponent"));  if (!yymatchClass((unsigned char *)"\000\000\000\000\000\000\000\000\040\000\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l22;
  {  int yypos23= yypos, yythunkpos23= yythunkpos;  if (!yymatchClass((unsigned char *)"\000\000\000\000\000\050\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l23;  goto l24;
  l23:;      yypos= yypos23; yythunkpos= yythunkpos23;
  }
  l24:;      if (!yy_Digit()) goto l22;
  l25:;    
  {  int yypos26= yypos, yythunkpos26= yythunkpos;  if (!yy_Digit()) goto l26;  goto l25;
  l26:;      yypos= yypos26; yythunkpos= yythunkpos26;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Exponent", yybuf+yypos));
  return 1;
  l22:;      yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Exponent", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Fraction()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Fraction"));  if (!yymatchChar('.')) goto l27;  if (!yy_Digit()) goto l27;
  l28:;    
  {  int yypos29= yypos, yythunkpos29= yythunkpos;  if (!yy_Digit()) goto l29;  goto l28;
  l29:;      yypos= yypos29; yythunkpos= yythunkpos29;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Fraction", yybuf+yypos));
  return 1;
  l27:;      yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Fraction", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Integer()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Integer"));
  {  int yypos31= yypos, yythunkpos31= yythunkpos;  if (!yymatchChar('-')) goto l31;  goto l32;
  l31:;      yypos= yypos31; yythunkpos= yythunkpos31;
  }
  l32:;      if (!yy_Digit()) goto l30;
  l33:;    
  {  int yypos34= yypos, yythunkpos34= yythunkpos;  if (!yy_Digit()) goto l34;  goto l33;
  l34:;      yypos= yypos34; yythunkpos= yythunkpos34;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Integer", yybuf+yypos));
  return 1;
  l30:;      yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Integer", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Hex()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Hex"));  if (!yymatchClass((unsigned char *)"\000\000\000\000\000\000\377\003\176\000\000\000\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l35;
  yyprintf((stderr, "  ok   %s @ %s\n", "Hex", yybuf+yypos));
  return 1;
  l35:;      yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Hex", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Char()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Char"));
  {  int yypos37= yypos, yythunkpos37= yythunkpos;  if (!yymatchString("\\u")) goto l38;  if (!yy_Hex()) goto l38;  if (!yy_Hex()) goto l38;  if (!yy_Hex()) goto l38;  if (!yy_Hex()) goto l38;  goto l37;
  l38:;      yypos= yypos37; yythunkpos= yythunkpos37;  if (!yymatchChar('\\')) goto l39;  if (!yymatchClass((unsigned char *)"\000\000\000\000\004\200\000\000\000\000\000\020\104\100\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l39;  goto l37;
  l39:;      yypos= yypos37; yythunkpos= yythunkpos37;
  {  int yypos40= yypos, yythunkpos40= yythunkpos;  if (!yymatchChar('\\')) goto l40;  goto l36;
  l40:;      yypos= yypos40; yythunkpos= yythunkpos40;
  }  if (!yymatchDot()) goto l36;
  }
  l37:;    
  yyprintf((stderr, "  ok   %s @ %s\n", "Char", yybuf+yypos));
  return 1;
  l36:;      yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Char", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Object()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Object"));  if (!yymatchChar('{')) goto l41;  if (!yy_Spacing()) goto l41;  yyDo(yy_1_Object, yybegin, yyend);
  l42:;    
  {  int yypos43= yypos, yythunkpos43= yythunkpos;  if (!yy_Pairs()) goto l43;  goto l42;
  l43:;      yypos= yypos43; yythunkpos= yythunkpos43;
  }  if (!yymatchChar('}')) goto l41;  if (!yy_Spacing()) goto l41;
  yyprintf((stderr, "  ok   %s @ %s\n", "Object", yybuf+yypos));
  return 1;
  l41:;      yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Object", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Array()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Array"));  if (!yymatchChar('[')) goto l44;  if (!yy_Spacing()) goto l44;  yyDo(yy_1_Array, yybegin, yyend);
  l45:;    
  {  int yypos46= yypos, yythunkpos46= yythunkpos;  if (!yy_Members()) goto l46;  goto l45;
  l46:;      yypos= yypos46; yythunkpos= yythunkpos46;
  }  if (!yymatchChar(']')) goto l44;  if (!yy_Spacing()) goto l44;
  yyprintf((stderr, "  ok   %s @ %s\n", "Array", yybuf+yypos));
  return 1;
  l44:;      yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Array", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Number()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Number"));  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l47;  if (!yy_Integer()) goto l47;
  {  int yypos48= yypos, yythunkpos48= yythunkpos;  if (!yy_Fraction()) goto l48;  goto l49;
  l48:;      yypos= yypos48; yythunkpos= yythunkpos48;
  }
  l49:;    
  {  int yypos50= yypos, yythunkpos50= yythunkpos;  if (!yy_Exponent()) goto l50;  goto l51;
  l50:;      yypos= yypos50; yythunkpos= yythunkpos50;
  }
  l51:;      yyText(yybegin, yyend);  if (!(YY_END)) goto l47;  if (!yy_Spacing()) goto l47;  yyDo(yy_1_Number, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Number", yybuf+yypos));
  return 1;
  l47:;      yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Number", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_String()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "String"));  if (!yymatchClass((unsigned char *)"\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l52;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l52;
  l53:;    
  {  int yypos54= yypos, yythunkpos54= yythunkpos;
  {  int yypos55= yypos, yythunkpos55= yythunkpos;  if (!yymatchClass((unsigned char *)"\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l55;  goto l54;
  l55:;      yypos= yypos55; yythunkpos= yythunkpos55;
  }  if (!yy_Char()) goto l54;  goto l53;
  l54:;      yypos= yypos54; yythunkpos= yythunkpos54;
  }  yyText(yybegin, yyend);  if (!(YY_END)) goto l52;  if (!yymatchClass((unsigned char *)"\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l52;  if (!yy_Spacing()) goto l52;  yyDo(yy_1_String, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "String", yybuf+yypos));
  return 1;
  l52:;      yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "String", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Boolean()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Boolean"));
  {  int yypos57= yypos, yythunkpos57= yythunkpos;  if (!yymatchString("true")) goto l58;  if (!yy_Spacing()) goto l58;  yyDo(yy_1_Boolean, yybegin, yyend);  goto l57;
  l58:;      yypos= yypos57; yythunkpos= yythunkpos57;  if (!yymatchString("false")) goto l56;  if (!yy_Spacing()) goto l56;  yyDo(yy_2_Boolean, yybegin, yyend);
  }
  l57:;    
  yyprintf((stderr, "  ok   %s @ %s\n", "Boolean", yybuf+yypos));
  return 1;
  l56:;      yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Boolean", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Null()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Null"));  if (!yymatchString("null")) goto l59;  if (!yy_Spacing()) goto l59;  yyDo(yy_1_Null, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Null", yybuf+yypos));
  return 1;
  l59:;      yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Null", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Spacing()
{
  yyprintf((stderr, "%s\n", "Spacing"));
  l61:;    
  {  int yypos62= yypos, yythunkpos62= yythunkpos;  if (!yy_Space()) goto l62;  goto l61;
  l62:;      yypos= yypos62; yythunkpos= yythunkpos62;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Spacing", yybuf+yypos));
  return 1;
}
YY_RULE(int) yy_Value()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Value"));
  {  int yypos64= yypos, yythunkpos64= yythunkpos;  if (!yy_Spacing()) goto l65;  if (!yy_Null()) goto l65;  goto l64;
  l65:;      yypos= yypos64; yythunkpos= yythunkpos64;  if (!yy_Spacing()) goto l66;  if (!yy_Boolean()) goto l66;  goto l64;
  l66:;      yypos= yypos64; yythunkpos= yythunkpos64;  if (!yy_Spacing()) goto l67;  if (!yy_String()) goto l67;  goto l64;
  l67:;      yypos= yypos64; yythunkpos= yythunkpos64;  if (!yy_Spacing()) goto l68;  if (!yy_Number()) goto l68;  goto l64;
  l68:;      yypos= yypos64; yythunkpos= yythunkpos64;  if (!yy_Spacing()) goto l69;  if (!yy_Array()) goto l69;  goto l64;
  l69:;      yypos= yypos64; yythunkpos= yythunkpos64;  if (!yy_Spacing()) goto l63;  if (!yy_Object()) goto l63;
  }
  l64:;    
  yyprintf((stderr, "  ok   %s @ %s\n", "Value", yybuf+yypos));
  return 1;
  l63:;      yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Value", yybuf+yypos));
  return 0;
}

#ifndef YY_PART

typedef int (*yyrule)();

YY_PARSE(int) YYPARSEFROM(yyrule yystart)
{
  int yyok;
  if (!yybuflen)
    {
      yybuflen= 1024;
      yybuf= malloc(yybuflen);
      yytextlen= 1024;
      yytext= malloc(yytextlen);
      yythunkslen= 32;
      yythunks= malloc(sizeof(yythunk) * yythunkslen);
      yyvalslen= 32;
      yyvals= malloc(sizeof(YYSTYPE) * yyvalslen);
      yybegin= yyend= yypos= yylimit= yythunkpos= 0;
    }
  yybegin= yyend= yypos;
  yythunkpos= 0;
  yyval= yyvals;
  yyok= yystart();
  if (yyok) yyDone();
  yyCommit();
  return yyok;
  (void)yyrefill;
  (void)yymatchDot;
  (void)yymatchChar;
  (void)yymatchString;
  (void)yymatchClass;
  (void)yyDo;
  (void)yyText;
  (void)yyDone;
  (void)yyCommit;
  (void)yyAccept;
  (void)yyPush;
  (void)yyPop;
  (void)yySet;
  (void)yytextmax;
}

YY_PARSE(int) YYPARSE(void)
{
  return YYPARSEFROM(yy_Value);
}

#endif
